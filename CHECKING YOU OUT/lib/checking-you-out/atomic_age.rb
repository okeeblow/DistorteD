# ## 1984  —  Inside Macintosh, Volume Ⅰ
#
# https://vintageapple.org/inside_o/pdf/Inside_Macintosh_Volume_I_1985.pdf#page=119 &
# https://spinsidemacintosh.neocities.org/im202.html#im037-004 sez —
#
# "The resource type is a sequence of any four characters (printing or nonprinting).
#  Its Pascal data type is: `TYPE ResType = PACKED ARRAY[l..4] OF CHAR;`"
#
# "Warning: Uppercase and lowercase letters are distinguished in resource types.
#  For example, `Menu` will not be recognized as the resource type for menus.
#
# NOTE: Though unstated, the character encoding is the native encoding of the Macintosh,
#       one of `::Encoding::Mac*` e.g. `::Encoding::MacRoman`.
#
#
# ## 1985  —  EA IFF '85
#
# http://www.martinreddy.net/gfx/2d/IFF.txt &
# http://www.textfiles.com/programming/FORMATS/ea.iff sez —
#
# "Macintosh uses a simple and elegant scheme of 4-character 'identifiers' to identify resource types,
#  clipboard format types, file types, and file creator programs. Alternatives are unique ID numbers
#  assigned by a central authority or by hierarchical authorities, unique ID numbers generated by algorithm,
#  other fixed length character strings, and variable length strings.
#  Character string identifiers double as readable signposts in data files and programs.
#  The choice of 4 characters is a good tradeoff between storage space, fetch/compare/store time,
#  and name space size. We'll honor Apple's designers by adopting this scheme."
#
# "Numeric types supported are two's complement binary integers in the format
#  used by the MC68000 processor — high byte first, high word first —
#  the reverse of 8088 and 6502 format."
# 
# "Characters are encoded in 8-bit ASCII. Characters in the range NUL (hex 0)
#  through DEL (hex 7F) are well defined by the 7-bit ASCII standard.
#  IFF uses the graphic group RJS (SP, hex 20) through R~S (hex 7E)."
#
# "A 'type ID', 'property name', 'FORM type', or any other IFF identifier is a 32-bit value:
#  the concatenation of four ASCII characters in the range R S (SP, hex 20) through R~S (hex 7E).
#  Spaces (hex 20) should not precede printing characters; trailing spaces are ok.
#  Control characters are forbidden.
#  `typedef CHAR ID[4];`
#  IDs are compared using a simple 32-bit case-dependent equality test."
#
#
# ## 1991  —  QuickTime File Format
#
# https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html &
# https://developer.apple.com/standards/qtff-2001.pdf sez —
#
# "Atom types are specified by a 32-bit unsigned integer, typically interpreted
#  as a four-character ASCII code. Apple, Inc. reserves all four-character codes
#  consisting entirely of lowercase letters. Unless otherwise stated,
#  all data in a QuickTime movie is stored in big-endian byte ordering,
#  also known as network byte ordering, in which the most significant bytes
#  are stored and transmitted first."
#
#
# ## 1991  —  Microsoft/IBM RIFF
#
# https://www.aelius.com/njh/wavemetatools/doc/riffmci.pdf#page=10 &
# http://netghost.narod.ru/gff/vendspec/micriff/ms_riff.txt sez —
#
# "RIFF (Resource Interchange File Format) is the tagged file structure
#  developed for multimedia resource files. The structure of a RIFF file
#  is similar to the structure of an Electronic Arts IFF file."
#
# "RIFF has a counterpart, RIFX, that is used to define RIFF file formats that use
#  the Motorola integer byte-ordering format rather than the Intel format.
#  A RIFX file is the same as a RIFF file, except that the first four bytes are ‘RIFX’
#  instead of ‘RIFF’, and integer byte ordering is represented in Motorola format."
#
# "A FOURCC is represented as a sequence of one to four ASCII alphanumeric characters,
#  padded on the right with blank characters (ASCII character value 32) as required,
#  with no embedded blanks. For example, the four-character code ‘FOO’ is stored as
#  a sequence of four bytes: 'F', 'O', 'O', ' ' in ascending addresses.
#  For quick comparisons, a four-character code may also be treated as a 32-bit number."
#
#  "The following escape sequences can be used in four-character codes and string chunks:
#     Escape Sequence     ASCII Value     Description
#     \n                  10              Newline character
#     \t                  9               Horizontal tab character
#     \b                  8               Backspace character
#     \r                  13              Carriage return character
#     \f                  12              Form feed character
#     \\                  92              Backslash
#     \'                  39              Single quote
#     \"                  34              Double quote
#     \ddd                Octal ddd       Arbitrary character"
#
#
# ## Apple Carbon
#
# https://opensource.apple.com/source/CarbonHeaders/CarbonHeaders-18.1/MacTypes.h.auto.html sez —
#
# "FourCharCode  —  A 32-bit value made by packing four 1 byte characters together
#  OSType        —  A FourCharCode used in the OS and file system (e.g. creator)
#  ResType       —  A FourCharCode used to tag resources (e.g. `DLOG`)"
#
#
# ## Implementation Notes
#
# From the above, we can see that the convention of calling them "four character" codes
# dates back as far as the Macintosh Toolbox, but this naming is misleading!
# The lede is buried in the parenthetical:  "a sequence of any four characters
# (printing or *nonprinting*)", i.e. it can contain null!
# Remember that they were speaking in terms of Pascal Strings, not null-terminated C Strings!
#
# Some examples of mid-FourCC null usage can be seen in the old `ms` codecs in QuickTime, i.e.:
# - 0x6D730002 — "ms\x00\x02" — Microsoft ADPCM-ACM code 2
# - 0x6D730011 — "ms\x00\x11" — DVI/Intel IMAADPCM-ACM code 17
# - 0x6D730055 — "ms\x00U"    — MPEG-1 layer 3, CBR only (pre-QT4.1)
# (From https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html)
#
# Note that this is different from the space character 0x20 and any rules involving it!
# For example the EA IFF spec sez:
#   "Spaces (hex 20) should not precede printing characters; trailing spaces are ok."

module ::CHECKING::YOU::OUT::Miracle4
  FourLeaf = ::Struct::new(:fourcc) do
    # TODO: Reject prefixed or infixed space characters (0x20). See RIFF specs.
    def fourcc=(cat); self[:fourcc] = self[:fourcc].nil? ? cat : self[:fourcc].call(cat); end
    def format=(format)
      self[:fourcc] = self[:fourcc].nil? ? format : format.call(self[:fourcc])
    end
    def empty? = self[:fourcc].nil? or self[:fourcc].is_a?(::Proc)
    def clear = self[:fourcc] = nil
    # TODO: Implement `#to_s` to `::Encoding::ASCII_8BIT`
    # TODO: Implement `#to_i` — how to handle endianness?
  end
end


module ::CHECKING::YOU::OUT::FourPiecesOfHeaven
  attr_reader(:four_pieces_of_heaven)
  def add_fourcc(four_leaf) = self.awen(:@four_pieces_of_heaven, four_leaf)
  def clear_fourccs = self.remove_instance_variable(:@four_pieces_of_heaven) if self.instance_variable_defined?(:@four_pieces_of_heaven)
end
